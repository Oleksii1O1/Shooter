from pygame import *
mixer.init()
mixer.music.load('space.ogg')
mixer.music.play()
fire_sound = mixer.Sound('fire.ogg')

back = "galaxy.jpg"  
hero = "rocket.png"  

class GameSprite(sprite.Sprite):
    def __init__(self, player_image, player_x, player_y, size_x, size_y, player_speed):
        sprite.Sprite.__init__(self)
        self.image = transform.scale(
            image.load(player_image), (size_x, size_y))
        self.speed = player_speed
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y
    
    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

class Player(GameSprite):
    def update(self):
        keys = key.get_pressed()
        if keys[K_a] and self.rect.x > 5:
            self.rect.x -= self.speed
        if keys[K_d] and self.rect.x < main_width - 80:
            self.rect.x += self.speed
        if keys[K_w] and self.rect.y > 0: 
            self.rect.y -= self.speed
        if keys[K_s] and self.rect.y < main_height - self.rect.height: 
            self.rect.y += self.speed 
    
    def fire(self):
        bullet = Bullet('bullet.png', self.rect.centerx, self.rect.top)
        bullets.add(bullet)

class Bullet(GameSprite):
    def __init__(self, bullet_image, bullet_x, bullet_y):
        super().__init__(bullet_image, bullet_x, bullet_y, 15, 20, -10)
    
    def update(self):
        self.rect.y += self.speed
        if self.rect.y < 0:
            self.kill()

main_width = 700
main_height = 500
display.set_caption("Shooter")
window = display.set_mode((main_width, main_height))
background = transform.scale(image.load(back), (main_width,main_height))
ship = Player(hero, 5, main_height - 100, 80, 100, 10)
bullets = sprite.Group()
finish = False
game = True  

while game:
    for e in event.get():
        if e.type == QUIT:
            game = False
        elif e.type == KEYDOWN:
            if e.key == K_SPACE:
                ship.fire()
                
    if not finish:
        window.blit(background, (0, 0))
        ship.update()
        ship.reset()
        bullets.update()
        bullets.draw(window)
        display.update()
    time.delay(50)
